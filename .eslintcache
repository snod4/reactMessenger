[{"/home/chase/code/CSProjects/test-messenger/src/index.js":"1","/home/chase/code/CSProjects/test-messenger/src/App.jsx":"2","/home/chase/code/CSProjects/test-messenger/src/Heading.jsx":"3","/home/chase/code/CSProjects/test-messenger/src/Sidebar.jsx":"4","/home/chase/code/CSProjects/test-messenger/src/ChatView.jsx":"5","/home/chase/code/CSProjects/test-messenger/src/Login.jsx":"6","/home/chase/code/CSProjects/test-messenger/src/Message.jsx":"7","/home/chase/code/CSProjects/test-messenger/src/MessageHeader.jsx":"8","/home/chase/code/CSProjects/test-messenger/src/UserLookup.jsx":"9","/home/chase/code/CSProjects/test-messenger/src/Input.jsx":"10","/home/chase/code/CSProjects/organizedMessenger/client/src/index.js":"11","/home/chase/code/CSProjects/organizedMessenger/client/src/App.jsx":"12","/home/chase/code/CSProjects/organizedMessenger/client/src/Heading.jsx":"13","/home/chase/code/CSProjects/organizedMessenger/client/src/Sidebar.jsx":"14","/home/chase/code/CSProjects/organizedMessenger/client/src/ChatView.jsx":"15","/home/chase/code/CSProjects/organizedMessenger/client/src/Login.jsx":"16","/home/chase/code/CSProjects/organizedMessenger/client/src/MessageHeader.jsx":"17","/home/chase/code/CSProjects/organizedMessenger/client/src/UserLookup.jsx":"18","/home/chase/code/CSProjects/organizedMessenger/client/src/Input.jsx":"19","/home/chase/code/CSProjects/organizedMessenger/client/src/Message.jsx":"20"},{"size":464,"mtime":1608165598628,"results":"21","hashOfConfig":"22"},{"size":3975,"mtime":1608162193639,"results":"23","hashOfConfig":"22"},{"size":127,"mtime":1608162193639,"results":"24","hashOfConfig":"22"},{"size":1108,"mtime":1608162193639,"results":"25","hashOfConfig":"22"},{"size":4233,"mtime":1608162193639,"results":"26","hashOfConfig":"22"},{"size":3777,"mtime":1608162193639,"results":"27","hashOfConfig":"22"},{"size":328,"mtime":1608162193639,"results":"28","hashOfConfig":"22"},{"size":928,"mtime":1608162193639,"results":"29","hashOfConfig":"22"},{"size":2064,"mtime":1608162193639,"results":"30","hashOfConfig":"22"},{"size":2579,"mtime":1608162193639,"results":"31","hashOfConfig":"22"},{"size":464,"mtime":1608332832063,"results":"32","hashOfConfig":"33"},{"size":3975,"mtime":1608332832063,"results":"34","hashOfConfig":"33"},{"size":127,"mtime":1608332832063,"results":"35","hashOfConfig":"33"},{"size":1108,"mtime":1608332832063,"results":"36","hashOfConfig":"33"},{"size":4233,"mtime":1608332832063,"results":"37","hashOfConfig":"33"},{"size":3777,"mtime":1608332832063,"results":"38","hashOfConfig":"33"},{"size":928,"mtime":1608332832063,"results":"39","hashOfConfig":"33"},{"size":2064,"mtime":1608332832063,"results":"40","hashOfConfig":"33"},{"size":2579,"mtime":1608332832063,"results":"41","hashOfConfig":"33"},{"size":328,"mtime":1608332832063,"results":"42","hashOfConfig":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},"xq1saj",{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"72"},"1rmngll",{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"72"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"/home/chase/code/CSProjects/test-messenger/src/index.js",["91"],"\nimport React, {useState} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n\n\nconsole.log(\"In index.js\")\n\nfetch(\"/home\").then(response => response.json()).then(loginJson => {\n  console.log(`index.js Login: ${loginJson.isLoggedIn}`);\n  ReactDOM.render(<App loginResults = {loginJson}/>, document.getElementById(\"root\"));\n  return;\n})\n\n\n\n\n\n// app.listen(process.env.PORT || 8080, () => {\n//   console.log(\"App listening on port 8080\");\n// })\n",["92","93"],"/home/chase/code/CSProjects/test-messenger/src/App.jsx",["94","95","96","97"],"import React, {useState, useEffect, useLayoutEffect} from \"react\";\nimport Heading from \"./Heading\";\nimport Sidebar from \"./Sidebar\";\nimport ChatView from \"./ChatView\";\nimport WebSocket from \"isomorphic-ws\";\nimport Login from \"./Login\"\n\n\n\nfunction App(props){\n\n  function heartbeat() {\n    clearTimeout(this.pingTimeout);\n\n    // Use `WebSocket#terminate()`, which immediately destroys the connection,\n    // instead of `WebSocket#close()`, which waits for the close timer.\n    // Delay should be equal to the interval at which your server\n    // sends out pings plus a conservative assumption of the latency.\n    this.pingTimeout = setTimeout(() => {\n      this.terminate();\n    }, 30000 + 1000);\n  }\n// useEffect(()=>{\n//   fetch(`/?id=${encodeURIComponent(id)}`)\n//    .then(response => response.json())\n//    .then(state => setUserMessages(state));\n// }, [props.id]);\n\n\n  const [login, setLogin] = useState({...props.loginResults});\n  const [ws, setWebSocket] = useState(()=>{\n    if(login.isLoggedIn){\n      const tempWs = new WebSocket('ws://localhost:8080');\n       tempWs.onopen = function open() {\n       tempWs.send(login.id);\n       console.log(`loginId: ${login.id}`);\n       // heartbeat();\n       // tempWs.on('ping', heartbeat);\n       // tempWs.on('close', function clear() {\n       //          clearTimeout(this.pingTimeout);\n       //        });\n     };\n     return tempWs;\n    }\n    return null;\n  });\n  // const [state, setState] = useState(\"Test\");\n  const [activeConvo, setConvo] = useState({\n    name:\"\",\n    convoId:-1,\n    recipientId: -1\n  });\n\n\n\n\n\n //  function handleSubmit(event) {\n //   event.preventDefault();\n //   console.log(state);\n //   fetch(`/api/greeting?name=${encodeURIComponent(state)}`)\n //     .then(response => response.json())\n //     .then(state => setState(state.greeting));\n // }\n //\n //\n // function handleChange(event){\n //   const value = event.target.value;\n //   setState(value);\n // }\n\n console.log(\"Connecting WebSocket\")\n if(ws == null && login.isLoggedIn){\n const tempWs = new WebSocket('ws://localhost:8080');\n  tempWs.onopen = function open() {\n  tempWs.send(login.id);\n  console.log(`loginId: ${login.id}`);\n  // heartbeat();\n  // tempWs.on('ping', heartbeat);\n  // tempWs.on('close', function clear() {\n  //          clearTimeout(this.pingTimeout);\n  //        });\n};\nsetWebSocket(tempWs);\n}\n if(!login.isLoggedIn){\n   return (\n     <Login handleLogin = {login => {\n       console.log(\"Login Handler:\")\n       console.log(login)\n       setLogin({...login});\n     }\n     }/>\n   );\n }\n else{\n\n   function changeConvo(name, convoId, recipientId){\n     setConvo({name:name, convoId: convoId, recipientId: recipientId});\n   }\n\n   function updateContent(senderId, message, senderName, convoId, notify){\n     console.log(`Update Content notify: ${notify}`);\n     setLogin(prev => {\n       for(let i = 0; i < prev.convos.length; i++){\n         if(prev.convos[i].recipientId === senderId){\n           prev.convos[i].newMessage = notify;\n           prev.convos[i].mostRecentMessage = {id:senderId, message:message};\n           //Play sound\n            return {...prev};\n         }\n       }\n\n       //Adds new convo in case new user contacted client\n       prev.convos.push({\n         recipientId:senderId, //id of person a user is talking to\n         convoId: convoId,\n         recipientName:senderName,\n         recipientPhoto:\"\",\n         newMessage: notify,\n         mostRecentMessage: {id:senderId, message:message}\n        });\n         return {...prev}\n\n     })\n   }\n   /// FIGURE OUT HOW TO GET SIDEBAR INFO FROM SEVER AND FIGURE OUT ACTIVE CONVO ON INITIAL LOAD\n\n\n\n\n  return (\n    <div style = {{height:\"inherit\"}}>\n\n    <Sidebar selectConverstation = {changeConvo} convoArr = {login.convos}/>\n     <ChatView convoId = {activeConvo.convoId} recipientId = {activeConvo.recipientId} senderId = {login.id} ws = {ws} name = {activeConvo.name} updateContent = {updateContent} />\n     </div>\n  );\n}\n\n}\n\nexport default App;\n","/home/chase/code/CSProjects/test-messenger/src/Heading.jsx",[],"/home/chase/code/CSProjects/test-messenger/src/Sidebar.jsx",[],"/home/chase/code/CSProjects/test-messenger/src/ChatView.jsx",["98"],"import React, {useState, useEffect} from \"react\";\nimport Input from \"./Input\";\nimport Message from \"./Message\";\nimport WebSocket from \"isomorphic-ws\";\n\n\nfunction ChatView(props){\nconst NOTIFY = true;\nconst NOT_NOTIFY = false;\nconst ws = props.ws;\nlet canPlay = false;\nconst notificationSound = new Audio(\"./notificationSound.mp3\");\nnotificationSound.addEventListener(\"canplaythrough\", event => {\n/* the audio is now playable; play it if permissions allow */\ncanPlay = true;\n});\n  const [messages, setMessages] = useState([]);\n  console.log(`Typeof: ${typeof messages}`)\n  //console.log(messages.map(()=>{return \"Test\"}))\n\n  useEffect(()=>{\n    console.log(\"Got use useEffect\")\n    if(props.recipientId === -1){\n      return;\n    }\n    console.log(`Got to chat fetch, recipeintId: ${props.recipientId}, name: ${props.name}`)\n      fetch(\"/chat\", {\n\n        // Adding method type\n        method: \"POST\",\n\n        // Adding body or contents to send\n        body: JSON.stringify({convoId: props.convoId, recipientId: props.recipientId, senderId: props.senderId, recipientName: props.name}),\n\n        // Adding headers to the request\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      })\n      .then(response => response.json())\n      .then(responseJSON => {\n        console.log(`Data: ${responseJSON.data}, typeof: ${typeof responseJSON.data}`)\n        console.log(responseJSON.data)\n        setMessages(responseJSON.data)\n      });\n\n  }, [props.convoId, props.name, props.recipientId, props.senderId]);\n\n  function notifySound(){\n    if(canPlay){\n      notificationSound.play();\n    }\n  }\n\n ws.onmessage = message => {\n   console.log(\"RECIEVED MESSAGE FROM SERVER\")\n   console.log(message)\n   const messageJson = JSON.parse(message.data);\n   console.log(messageJson)\n   if(messageJson.senderId === props.recipientId){\n     notifySound();\n     props.updateContent(messageJson.senderId, messageJson.message, messageJson.senderName, messageJson.convoId, NOT_NOTIFY);\n     setMessages([...messages, {id:messageJson.recipientId, message: messageJson.message}]);\n   }\n   else{\n     notifySound();\n     console.log(\"Hewre\")\n     props.updateContent(messageJson.senderId, messageJson.message, messageJson.senderName, messageJson.convoId, NOTIFY);\n   }\n };\n\n  console.log(`messages:`);\n  console.log(messages)\n  console.log(ws)\n\n\n  function addUserMessage(message){\n    if(message === \"\"){\n      return;\n    }\n\n    setMessages(prevMessages => {\n      prevMessages.push({\n        id:props.senderId,\n        message: message\n      });\n\n      ws.send(JSON.stringify({\n        recipientId:props.recipientId,\n        message: message\n      }));\n\n      props.updateContent(props.recipientId, message, \"\", props.convoId, NOT_NOTIFY);\n\n\n      return [...prevMessages];\n    });\n  }\n\n      // POST request using fetch()\n  //   fetch('/chat', {\n  //\n  //       // Adding method type\n  //       method: \"POST\",\n  //\n  //       // Adding body or contents to send\n  //       body: JSON.stringify(prevMessages),\n  //\n  //       // Adding headers to the request\n  //       headers: {\n  //           \"Content-type\": \"application/json; charset=UTF-8\"\n  //       }\n  //   })\n  //\n  //   // Converting to JSON\n  //   .then(response => response.json())\n  //\n  //   // Displaying results to console\n  //   .then(json => console.log(json));\n  //\n  //         return {...prevMessages};\n  // });\n\n\n\n\nreturn (\n  <table className=\"messageWindow\">\n  <tbody>\n            <tr className = \"name-plate\">\n                <td valign=\"top\"><h1>{props.recipientId !== -1 ? props.name: \"Pick someone\"}</h1></td>\n            </tr>\n            <tr>\n              <td valign = \"middle\" style = {{height:\"100%\"}} >\n              <div className = \"message-text-section\">\n                {props.recipeintId !== -1 ? messages.map((item, index) => <Message key = {index} message = {item.message} sent = {item.id === props.senderId} />) : \"Start Chatting Here\"}\n                </div>\n              </td>\n            </tr>\n            <tr>\n                <td valign=\"bottom\">{ props.recipientId !== -1 ? <Input sendMessage = {addUserMessage}/> : null}</td>\n            </tr>\n            </tbody>\n        </table>\n);\n}\n\nexport default ChatView;\n","/home/chase/code/CSProjects/test-messenger/src/Login.jsx",[],"/home/chase/code/CSProjects/test-messenger/src/Message.jsx",[],"/home/chase/code/CSProjects/test-messenger/src/MessageHeader.jsx",["99"],"import React from \"react\";\n\nfunction MessageHeader(props){\n    let messageHeader = \"message-header\";\n    let activeClass = messageHeader;\n    if(props.notify){\n      activeClass = messageHeader + \" notify\";\n    }\n  return (\n    <div className = {activeClass} onClick = {() => {\n      props.convoRef.newMessage = false; //Sketchy solution. Fix?\n      props.selectConverstation(props.name, props.convoId, props.recipientId)}}>\n    <div className = \"row\">\n        <div className =\"profilePic col-3\">\n          <img src = {props.image} alt  = \"profile picture\"/>\n        </div>\n        <div className = \"messageInfo col\">\n          <h3>{props.name}</h3>\n          <p>{props.content != null ? props.content.message.length >= 30 ? props.content.message.substr(0, 30) + \" . . .\" :props.content.message.substr(0, 30) : \"Send this person a message\"}</p>\n        </div>\n      </div>\n      </div>\n      );\n}\n\nexport default MessageHeader;\n","/home/chase/code/CSProjects/test-messenger/src/UserLookup.jsx",["100"],"import React, {useState, useEffect} from \"react\";\nimport AddIcon from '@material-ui/icons/Add';\n\nfunction UserLookup(props){\n  const [value, setValue] = useState(\"\");\n  const [displayItems, setDisplayItems] = useState({\n    show:false,\n    items:[]\n  });\n\n  function updateInput(event){\n    const currentVal = event.target.value;\n    setValue(currentVal);\n   }\n\n   useEffect(() => {\n     if(value === \"\"){\n       setDisplayItems({\n         show:false,\n         items: []})\n       return;\n     }\n     fetch(\"/userLookup\", {\n\n       // Adding method type\n       method: \"POST\",\n\n       // Adding body or contents to send\n       body: JSON.stringify({name: value}),\n\n       // Adding headers to the request\n       headers: {\n           \"Content-type\": \"application/json; charset=UTF-8\"\n       }\n     })\n     .then(response => response.json())\n     .then(docs => {\n       console.log(docs);\n       setDisplayItems({\n         show:true,\n         items: docs});\n     })}, [value]);\n\n\n\n  return (\n    <div className = \"add-convo\">\n\n\n            <input onChange = {updateInput} onFocus = {() => setDisplayItems(prev => {return {show: true, items: prev.items}})} onBlur = {() => setDisplayItems( prev => {return {show: true, items: prev.items}})}type= \"text\" placeholder = \"Name\" value = {value}/ >\n            {displayItems.show ? <div className = \"search-results\">{displayItems.items.map((item, key) =>{\n              return <div onClick = {() => {\n                setDisplayItems(prev => {return {...prev, show:false}});\n                console.log(`Item.realName: ${item.realName}`)\n                props.addToConvoArr({\n                  recipientName: item.realName,\n                   convoId: null,\n                   recipientId: item._id,\n                   recipientPhoto:\"\",\n                   notify: false,\n                   mostRecentMessage: null\n\n                  });\n                  }}>\n                  {item.realName}\n                   </div>})}\n                  </div>\n                  :null}\n\n\n\n\n\n    </div>\n  );\n}\n\nexport default UserLookup;\n","/home/chase/code/CSProjects/test-messenger/src/Input.jsx",[],["101","102"],"/home/chase/code/CSProjects/organizedMessenger/client/src/index.js",["103"],["104","105"],"/home/chase/code/CSProjects/organizedMessenger/client/src/App.jsx",["106","107","108","109"],"/home/chase/code/CSProjects/organizedMessenger/client/src/Heading.jsx",[],"/home/chase/code/CSProjects/organizedMessenger/client/src/Sidebar.jsx",[],"/home/chase/code/CSProjects/organizedMessenger/client/src/ChatView.jsx",["110"],"/home/chase/code/CSProjects/organizedMessenger/client/src/Login.jsx",[],"/home/chase/code/CSProjects/organizedMessenger/client/src/MessageHeader.jsx",["111"],"/home/chase/code/CSProjects/organizedMessenger/client/src/UserLookup.jsx",["112"],"/home/chase/code/CSProjects/organizedMessenger/client/src/Input.jsx",[],"/home/chase/code/CSProjects/organizedMessenger/client/src/Message.jsx",[],{"ruleId":"113","severity":1,"message":"114","line":2,"column":16,"nodeType":"115","messageId":"116","endLine":2,"endColumn":24},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"113","severity":1,"message":"121","line":1,"column":26,"nodeType":"115","messageId":"116","endLine":1,"endColumn":35},{"ruleId":"113","severity":1,"message":"122","line":1,"column":37,"nodeType":"115","messageId":"116","endLine":1,"endColumn":52},{"ruleId":"113","severity":1,"message":"123","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":15},{"ruleId":"113","severity":1,"message":"124","line":12,"column":12,"nodeType":"115","messageId":"116","endLine":12,"endColumn":21},{"ruleId":"113","severity":1,"message":"125","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":17},{"ruleId":"126","severity":1,"message":"127","line":15,"column":11,"nodeType":"128","endLine":15,"endColumn":62},{"ruleId":"113","severity":1,"message":"129","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":15},{"ruleId":"117","replacedBy":"130"},{"ruleId":"119","replacedBy":"131"},{"ruleId":"113","severity":1,"message":"114","line":2,"column":16,"nodeType":"115","messageId":"116","endLine":2,"endColumn":24},{"ruleId":"117","replacedBy":"132"},{"ruleId":"119","replacedBy":"133"},{"ruleId":"113","severity":1,"message":"121","line":1,"column":26,"nodeType":"115","messageId":"116","endLine":1,"endColumn":35},{"ruleId":"113","severity":1,"message":"122","line":1,"column":37,"nodeType":"115","messageId":"116","endLine":1,"endColumn":52},{"ruleId":"113","severity":1,"message":"123","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":15},{"ruleId":"113","severity":1,"message":"124","line":12,"column":12,"nodeType":"115","messageId":"116","endLine":12,"endColumn":21},{"ruleId":"113","severity":1,"message":"125","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":17},{"ruleId":"126","severity":1,"message":"127","line":15,"column":11,"nodeType":"128","endLine":15,"endColumn":62},{"ruleId":"113","severity":1,"message":"129","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":15},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-native-reassign",["134"],"no-negated-in-lhs",["135"],"'useEffect' is defined but never used.","'useLayoutEffect' is defined but never used.","'Heading' is defined but never used.","'heartbeat' is defined but never used.","'WebSocket' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'AddIcon' is defined but never used.",["134"],["135"],["134"],["135"],"no-global-assign","no-unsafe-negation"]